{"ast":null,"code":"import _classCallCheck from \"C:/Users/EthanDonovan/Documents/shopping-list/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/EthanDonovan/Documents/shopping-list/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { throwError, BehaviorSubject } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport { Router } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport var AuthService = /*#__PURE__*/(function () {\n  var AuthService = /*#__PURE__*/function () {\n    function AuthService(http, router) {\n      _classCallCheck(this, AuthService);\n\n      this.http = http;\n      this.router = router; //create new subject with data as user\n      //Subjects are observables that you can subscribe to\n\n      this.user = new BehaviorSubject(null);\n    }\n\n    _createClass(AuthService, [{\n      key: \"signup\",\n      value: function signup(email, password) {\n        var _this = this;\n\n        //Make post request to signup endpoint expecting AuthResponseData to be returned\n        return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAiT3yHTXlDLwx1D4c7dH0xtYx8OZGd8R4', {\n          email: email,\n          password: password,\n          returnSecureToken: true\n        }).pipe(catchError(this.handleError), //catch errors\n        tap(function (responseData) {\n          _this.handleAuthentication(responseData.email, responseData.localId, responseData.idToken, +responseData.expiresIn);\n        }));\n      }\n    }, {\n      key: \"handleAuthentication\",\n      value: function handleAuthentication(email, userId, token, expiresIn) {\n        //create a new expiration date by getting the current time in seconds and adding expires in\n        var expirationDate = new Date(new Date().getTime() + expiresIn * 1000); //create a new user object with authentication details\n\n        var user = new User(email, userId, token, expirationDate);\n        this.user.next(user);\n        this.autoLogout(expiresIn * 1000);\n        localStorage.setItem('userData', JSON.stringify(user));\n      }\n    }, {\n      key: \"login\",\n      value: function login(email, password) {\n        var _this2 = this;\n\n        //make a post request to login endpoint casting the data to AuthResponseData\n        return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAiT3yHTXlDLwx1D4c7dH0xtYx8OZGd8R4', {\n          email: email,\n          password: password,\n          returnSecureToken: true\n        }).pipe(catchError(this.handleError), tap(function (responseData) {\n          _this2.handleAuthentication(responseData.email, responseData.localId, responseData.idToken, +responseData.expiresIn);\n        })); //pipe data to error handler to catch any errors \n      }\n    }, {\n      key: \"logout\",\n      value: function logout() {\n        this.user.next(null);\n        localStorage.removeItem('userData');\n\n        if (this.tokenExpirationTimer) {\n          clearTimeout(this.tokenExpirationTimer);\n        }\n\n        this.tokenExpirationTimer = null;\n        this.router.navigate(['/auth']);\n      }\n    }, {\n      key: \"autoLogout\",\n      value: function autoLogout(expirationDuration) {\n        var _this3 = this;\n\n        console.log(expirationDuration);\n        this.tokenExpirationTimer = setTimeout(function () {\n          _this3.logout();\n        }, expirationDuration);\n      }\n    }, {\n      key: \"autoLogin\",\n      value: function autoLogin() {\n        var userData = JSON.parse(localStorage.getItem('userData'));\n\n        if (!userData) {\n          return;\n        }\n\n        var loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n\n        if (loadedUser.token) {\n          this.user.next(loadedUser);\n          var expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n          this.autoLogout(expirationDuration);\n        }\n      }\n    }, {\n      key: \"handleError\",\n      value: function handleError(errorRes) {\n        //set default error if non matches\n        var errorMessage = 'An unknow error occurred while signing'; //if there is not an error  or an error message\n\n        if (!errorRes.error || !errorRes.error.error) {\n          //return default error\n          return throwError(errorMessage);\n        }\n\n        console.log(errorRes); //Authentication errors\n        //https://firebase.google.com/docs/reference/rest/auth\n\n        switch (errorRes.error.error.message) {\n          case 'EMAIL_EXISTS':\n            errorMessage = 'This email already exists, please try another email';\n            break;\n\n          case 'INVALID_PASSWORD':\n            errorMessage = 'This password is invalid, please try again later';\n            break;\n\n          case 'EMAIL_NOT_FOUND':\n            errorMessage = 'This email does not exist';\n            break;\n\n          case 'USER_DISABLED':\n            errorMessage = 'Account is disabled by admin';\n        }\n\n        return throwError(errorMessage);\n      }\n    }]);\n\n    return AuthService;\n  }();\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}